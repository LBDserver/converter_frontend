{"version":3,"sources":["components/FormComponent.js","components/ApiComponent.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","FormComponent","props","addToConversionList","e","state","conversions","checked","target","id","push","filter","v","i","a","setState","setFile","preventDefault","files","setExtension","c","submitForm","formData","FormData","append","name","JSON","stringify","includes","baseUri","processing","post","responseType","headers","then","res","console","log","disposition","request","getResponseHeader","matches","exec","replace","blob","Blob","data","type","conversionUrl","URL","createObjectURL","conversionUrls","converted","catch","error","message","onChangeBaseUri","value","slice","LBD","fields","fileName","ifcOWL","GLTF","DAE","downloadButton","this","map","url","Alert","key","variant","onClose","dismissible","Link","href","Heading","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","placeholder","onChange","onSubmit","accept","style","marginTop","Object","keys","Check","inline","label","Button","disabled","length","Component","ApiComponent","divStyle","margin","minHeight","position","App","rel","to","Boolean","window","location","hostname","match","routing","StrictMode","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a5b7aea.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n    Form,\n    Row,\n    Col,\n    Button,\n    Alert\n} from 'react-bootstrap'\n\nconst axios = require('axios')\n\nexport default class FormComponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            conversions: {\n                LBD: { checked: false, fields: { baseUri: '', fileName: '' } },\n                ifcOWL: { checked: false },\n                GLTF: { checked: false },\n                DAE: { checked: false }\n            },\n            checked: [],\n            converted: false,\n            conversionUrls: [],\n            error: false,\n            baseUri: \"http://www.example.com/lbdconversion/\"\n        }\n    }\n\n    addToConversionList = (e) => {\n        let { conversions, checked } = this.state\n        conversions[e.target.id][\"checked\"] = !conversions[e.target.id][\"checked\"]\n        if (conversions[e.target.id][\"checked\"]) {\n            checked.push(e.target.id)\n        } else {\n            checked = checked.filter((v, i, a) => {\n                return v !== e.target.id\n            })\n        }\n\n        this.setState({ conversions, checked })\n    }\n\n    setFile = (e) => {\n        e.preventDefault()\n        this.setState({ files: e.target.files[0] })\n    }\n\n    setExtension = (c) => {\n        switch (c) {\n            case (\"LBD\"):\n            case (\"ifcOWL\"):\n                return ('.ttl');\n            case (\"GLTF\"):\n                return ('.gltf');\n            case (\"DAE\"):\n                return ('.dae');\n            case (\"XML\"):\n                return ('.xml');\n            default:\n                break;\n        }\n    }\n\n    submitForm = async (e) => {\n        e.preventDefault()\n\n        const formData = new FormData()\n        formData.append(\"ifcFile\", this.state.files, this.state.files.name)\n        formData.append(\"conversions\", JSON.stringify(this.state.checked))\n        if (this.state.checked.includes('LBD') || this.state.checked.includes('ifcOWL')) {\n            formData.append(\"baseUri\", this.state.baseUri)\n        }\n\n        this.setState({ processing: true })\n        axios.post(`http://localhost:4800/convert`, formData, {\n            responseType: 'arraybuffer',\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            }\n        })\n            .then((res) => {\n                console.log('res', res)\n                const disposition = res.request.getResponseHeader('Content-Disposition')\n                var fileName = \"\";\n                var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n                var matches = filenameRegex.exec(disposition);\n                if (matches != null && matches[1]) {\n                    fileName = matches[1].replace(/['\"]/g, '');\n                }\n                let blob = new Blob([res.data], { type: 'application/zip' })\n\n                const conversionUrl = URL.createObjectURL(blob)\n                let conversionUrls = this.state.conversionUrls\n                conversionUrls.push(conversionUrl)\n                this.setState({ converted: true, conversionUrls, processing: false })\n            })\n            .catch((error) => {\n                this.setState({ error: error.message, processing: false })\n            })\n        // }\n\n    }\n\n    onChangeBaseUri = (e) => {\n        let baseUri = e.target.value\n        if (baseUri.slice(-1) !== '/') {\n            baseUri = baseUri + '/'\n        }\n        this.setState({ baseUri })\n    }\n\n\n\n    render() {\n\n        let downloadButton, error, baseUri\n\n        downloadButton = this.state.conversionUrls.map(url => {\n            return <Alert key={url} variant=\"success\" onClose={() => this.setState({ conversionUrls: this.state.conversionUrls.filter((v) => v !== url) })} dismissible>\n                Your ZIP file is now ready! Click <Alert.Link href={url}>here</Alert.Link> to download\n        </Alert>\n        })\n\n        if (this.state.error) {\n            error = <Alert variant=\"danger\" onClose={() => this.setState({ error: false })} dismissible>\n                <Alert.Heading>Oh snap! A conversion error occured!</Alert.Heading>\n                <p>\n                    {this.state.error}\n                </p>\n            </Alert>\n        }\n\n        if (this.state.checked.includes('LBD') || this.state.checked.includes('ifcOWL')) {\n            baseUri = <Form.Group as={Row} controlId=\"formBaseUri\">\n                <Form.Label column sm=\"2\">Base URI</Form.Label>\n                <Col sm=\"10\">\n                    <Form.Control type=\"url\" name=\"text\" placeholder=\"http://www.example.com/lbdconversion/\" onChange={this.onChangeBaseUri} />\n                </Col>\n            </Form.Group>\n        }\n\n        return (\n            <div>\n                <Form onSubmit={this.submitForm}>\n                    <Form.Group as={Row} controlId=\"formFile\">\n                        <Form.Label column sm=\"2\">IFC File</Form.Label>\n                        <br />\n                        <Col sm=\"10\">\n                            <input\n                                type=\"file\"\n                                name=\"file\"\n                                accept=\".ifc\"\n                                onChange={this.setFile}\n                                style={{ marginTop: 2 }}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} controlId=\"conversions\">\n                        <Form.Label column sm=\"2\">Conversions</Form.Label>\n                        <br />\n                        <Col sm=\"10\">\n                            {Object.keys(this.state.conversions).map((type) => (\n                                <Form.Check\n                                    onChange={this.addToConversionList}\n                                    checked={this.state.conversions[type][\"checked\"]}\n                                    inline\n                                    key={type}\n                                    label={type}\n                                    type=\"checkbox\"\n                                    id={type}\n\n                                    style={{ marginTop: 7 }}\n                                />\n                            ))}\n                        </Col>\n                    </Form.Group>\n                    {baseUri}\n                    <hr />\n                    <Button variant=\"dark\" type=\"submit\" disabled={this.state.files && this.state.checked.length && !this.state.processing > 0 ? false : true}>\n                        {this.state.processing ? \"Processing\" : \"Start Conversion\"}\n                    </Button>\n                    <div style={{ marginTop: \"20px\" }}>\n                        {downloadButton}\n                    </div>\n\n                    <div style={{ marginTop: \"20px\" }}>\n                        {error}\n                    </div>\n                </Form>\n            </div>\n        )\n    }\n}\n","import React from 'react'\nimport SwaggerUI from \"swagger-ui-react\"\nimport \"swagger-ui-react/swagger-ui.css\"\n\n\nfunction ApiComponent() {\n    return (\n        <div>\n            <SwaggerUI url={process.env.PUBLIC_URL + '/swagger.json'} />\n        </div>\n    )\n}\n\nexport default ApiComponent","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { FormComponent } from './components'\nimport {Link} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div style={divStyle}>\n      <h1>IFC Conversion GUI</h1>\n      <p>\n        This is a graphical user interface to convert your IFC file using the LBDserver conversion API.\n        The converter relies on multiple existing tools, such as \n          <a href=\"http://ifcopenshell.org/ifcconvert\" target=\"_blank\" rel=\"noopener noreferrer\"> IfcConvert</a> (Thomas Krijnen), \n          <a href=\"https://github.com/KhronosGroup/COLLADA2GLTF/\" target=\"_blank\" rel=\"noopener noreferrer\"> COLLADA2GLTF</a> (KhronosGroup),\n          <a href=\"https://github.com/pipauwel/IFCtoRDF\" target=\"_blank\" rel=\"noopener noreferrer\"> IFCtoRDF</a> (Pieter Pauwels) and \n          <a href=\"https://github.com/jyrkioraskari/IFCtoLBD\" target=\"_blank\" rel=\"noopener noreferrer\"> IFCtoLBD</a> (Jyrki Oraskari).\n        An example file (ifcDuplex) can be downloaded <a href={process.env.PUBLIC_URL + '/duplex.ifc'}>here</a>. \n        You can also use the <Link to=\"/docs\">API</Link>. \n      </p>\n      <FormComponent />\n    </div>\n  );\n}\n\nconst divStyle = {\n  margin: \"10%\",\n  minHeight: \"100vh\",\n  position: \"relative\"\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport {ApiComponent} from './components';\n\nconst routing = (\n  <React.StrictMode>\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/docs\" component={ApiComponent} />\n      </div>\n    </Router>\n  </React.StrictMode>\n)\n\nReactDOM.render(\n  routing,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}